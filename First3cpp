题目：给定一个二叉树，判断其是否是一个有效的二叉搜索树。
      假设一个二叉搜索树具有如下特征：
      1.节点的左子树只包含小于当前节点的数。
      2.节点的右子树只包含大于当前节点的数。
      3.所有左子树和右子树自身必须也是二叉搜索树。

解法：递归，二叉搜索树的整体的左孩子（子树）一定比根节点小，右孩子（子树）一定比根节点大；因此使用上下界限来判断

class Solution {
public:
    bool helper(TreeNode* root, long long lower, long long upper) {
        if (root == nullptr) return true;                                           //前序遍历
        if (root -> val <= lower || root -> val >= upper) return false;
        return helper(root -> left, lower, root -> val) && helper(root -> right, root -> val, upper);
    }
    bool isValidBST(TreeNode* root) {
        return helper(root, LONG_MIN, LONG_MAX);
    }
};
